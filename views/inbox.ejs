<%- include('./partials/header.ejs'); %>
<div id="chat-container">
  <div id="search-container">
    <input type="text" placeholder="Search" />
  </div>
  <div id="conversation-list">
    <% data.forEach(function(conversation) { %>
    <!-- conversation creator is same to logged in user, so we need to show participant username and avatar -->
    <% if(conversation.creator.id == loggedInUser.userid) { %>
    <div
      class="conversation"
      onclick="getMessages('<%= conversation._id %>', '<%= conversation.participant.username %>')"
    >
      <% if (conversation.participant.avatar) { %>
      <img
        src="./uploads/avatars/<%= conversation.participant.avatar %>"
        alt="<%= conversation.participant.username %>"
      />
      <% } else { %>
      <img src="./images/nophoto.png" />
      <% } %>
      <div class="title-text"><%= conversation.participant.username %></div>
      <div class="conversation-date">
        <%= moment(conversation.last_updated).fromNow() %>
      </div>
    </div>
    <% } else { %>
    <div
      class="conversation"
      onclick="getMessages('<%= conversation._id %>', '<%= conversation.creator.username %>')"
    >
      <% if (conversation.creator.avatar) { %>
      <img
        src="./uploads/avatars/<%= conversation.creator.avatar %>"
        alt="<%= conversation.creator.username %>"
      />
      <% } else { %>
      <img src="./images/nophoto.png" />
      <% } %>
      <div class="title-text"><%= conversation.creator.username %></div>
      <div class="conversation-date">
        <%= moment(conversation.last_updated).fromNow() %>
      </div>
    </div>
    <% } %> <% }); %>

    <!-- show no conversation placeholder image for 0 conversations -->
    <% if(data && data.length === 0) { %>
    <div class="nothing"><img src="./images/no-conversation.svg" /></div>
    <% } %>
  </div>

  <div class="new-message-container" onclick="openModal()">
    <a href="#">+</a>
  </div>

  <div id="chat-title">
    <span id="conversation-partner"></span>
    <img src="./images/trash.png" alt="Delete Conversation" />
  </div>

  <!-- placeholder div if no messages are in messages area -->
  <div id="chat-message-list">
    <div class="nothing">select a conversation</div>
  </div>

  <!-- send message form -->
  <form id="chat-form" method="post" enctype="multipart/form-data">
    <div id="attachment-preview" class="attachment-preview"></div>
    <div class="form-input-container">
      <label for="attachment" class="attachment-label">
        <img src="./images/attachment.png" alt="Add Attachment" />
      </label>
      <input
        type="file"
        multiple
        name="attachment"
        class="hide"
        id="attachment"
        accept="image/jpeg,image/jpg,image/png"
      />
      <input
        type="text"
        name="message"
        placeholder="Type a message"
        autocomplete="off"
      />
      <button type="submit" id="send-button">
        <img src="./images/send.png" alt="Send" />
      </button>
    </div>
  </form>
</div>
<%- include('./partials/add-conversation-modal.ejs'); %>

<!-- import socket io client from cdn -->
<script
  src="https://cdnjs.cloudflare.com/ajax/libs/socket.io/4.2.0/socket.io.js"
  integrity="sha512-WL6WGKMPBiM9PnHRYIn5YEtq0Z8XP4fkVb4qy7PP4vhmYQErJ/dySyXuFIMDf1eEYCXCrQrMJfkNwKc9gsjTjA=="
  crossorigin="anonymous"
  referrerpolicy="no-referrer"
></script>

<!-- Add this JavaScript to handle image preview -->
<script>
  // Replace the entire attachment handling script with this improved version:
  document.addEventListener('DOMContentLoaded', function () {
    const attachmentInput = document.getElementById('attachment');
    const previewContainer = document.getElementById('attachment-preview');
    const chatForm = document.getElementById('chat-form');
    const chatMessageList = document.getElementById('chat-message-list');

    // Listen for file selection changes
    attachmentInput.addEventListener('change', function () {
      if (this.files.length > 0) {
        previewContainer.innerHTML = ''; // Clear existing previews
        previewContainer.style.display = 'flex';

        // Create previews for each file
        Array.from(this.files).forEach((file) => {
          if (file.type.match('image.*')) {
            const reader = new FileReader();

            reader.onload = function (e) {
              const previewItem = document.createElement('div');
              previewItem.className = 'preview-item';

              const img = document.createElement('img');
              img.src = e.target.result;
              img.alt = 'Attachment preview';

              const removeButton = document.createElement('div');
              removeButton.className = 'remove-preview';
              removeButton.innerHTML = '×';
              removeButton.onclick = function () {
                previewContainer.removeChild(previewItem);

                // If no previews left, hide the container
                if (previewContainer.children.length === 0) {
                  previewContainer.style.display = 'none';
                  chatMessageList.style.paddingBottom = '0';
                }
              };

              previewItem.appendChild(img);
              previewItem.appendChild(removeButton);
              previewContainer.appendChild(previewItem);
            };

            reader.readAsDataURL(file);
          }
        });

        // Adjust chat message list padding
        chatMessageList.style.paddingBottom = '120px';
      }
    });

    // Reset attachment previews when form is submitted
    chatForm.addEventListener('submit', function () {
      setTimeout(() => {
        previewContainer.innerHTML = '';
        previewContainer.style.display = 'none';
        chatMessageList.style.paddingBottom = '0';
      }, 100);
    });

    // Initialize to hide the preview container
    previewContainer.style.display = 'none';
  });
</script>

<!-- <script>
  // Enhanced attachment preview functionality
  document.addEventListener('DOMContentLoaded', function () {
    const attachmentInput = document.getElementById('attachment');
    const previewContainer = document.getElementById('attachment-preview');
    const chatForm = document.getElementById('chat-form');
    const chatMessageList = document.getElementById('chat-message-list');
    let selectedFiles = [];

    // Function to update the input files list
    function updateInputFiles() {
      const dataTransfer = new DataTransfer();

      // Add the remaining files to the DataTransfer object
      selectedFiles.forEach((file) => {
        dataTransfer.items.add(file);
      });

      // Set the input's files to the new file list
      attachmentInput.files = dataTransfer.files;
    }

    // Function to create preview for a single file
    function createPreview(file, index) {
      if (!file.type.match('image.*')) {
        return; // Skip non-image files
      }

      const reader = new FileReader();

      reader.onload = function (e) {
        const previewItem = document.createElement('div');
        previewItem.className = 'preview-item';

        const img = document.createElement('img');
        img.src = e.target.result;
        img.alt = 'Attachment preview';

        const removeButton = document.createElement('div');
        removeButton.className = 'remove-preview';
        removeButton.innerHTML = '×';
        removeButton.dataset.index = index;
        removeButton.addEventListener('click', function () {
          removeFile(parseInt(this.dataset.index));
        });

        previewItem.appendChild(img);
        previewItem.appendChild(removeButton);
        previewContainer.appendChild(previewItem);
      };

      reader.readAsDataURL(file);
    }

    // Function to remove a file from the selection
    function removeFile(index) {
      selectedFiles.splice(index, 1);
      updateInputFiles();
      renderPreviews();
    }

    // Function to render all previews
    function renderPreviews() {
      previewContainer.innerHTML = ''; // Clear existing previews

      if (selectedFiles.length > 0) {
        // Show the preview container when files are selected
        previewContainer.style.display = 'flex';

        selectedFiles.forEach((file, index) => {
          createPreview(file, index);
        });

        // Adjust the chat message list to account for the preview
        // This gives a visual cue that the preview is taking space
        chatMessageList.style.paddingBottom = '120px';
      } else {
        // Hide the preview container when no files are selected
        previewContainer.style.display = 'none';

        // Reset the chat message list padding
        chatMessageList.style.paddingBottom = '0';
      }
    }

    // Listen for file selection changes
    attachmentInput.addEventListener('change', function () {
      if (this.files.length > 0) {
        // Add new files to our array
        Array.from(this.files).forEach((file) => {
          if (file.type.match('image.*')) {
            selectedFiles.push(file);
          }
        });

        renderPreviews();
      }
    });

    // Reset attachment previews when form is submitted
    chatForm.addEventListener('submit', function () {
      setTimeout(() => {
        selectedFiles = [];
        renderPreviews(); // This will hide the preview and reset padding
      }, 100);
    });

    // Initialize to hide the preview container
    previewContainer.style.display = 'none';
  });
</script> -->

<script>
  const form = document.querySelector('#chat-form');
  const messageContainer = document.querySelector('#chat-message-list');
  const chatTitleContainer = document.querySelector('#conversation-partner');
  const loggedinUserId = '<%= loggedInUser.userid %>';
  const loggedinUserName = '<%= loggedInUser.username %>';
  let participant = null; // selected conversation participant object
  let current_conversation_id; // selected conversation id

  // socket initialization
  const socket = io('<%= process.env.APP_URL %>');

  // handle new/live incoming message from socket
  socket.on('new_message', (data) => {
    // only respond if current conversation is open in any client
    if (data.message.conversation_id == current_conversation_id) {
      // message class
      const messageClass =
        data.message.sender.id === loggedinUserId
          ? 'you-message'
          : 'other-message';

      const senderAvatar = data.message.sender.avatar
        ? `<img src="./uploads/avatars/${data.message.sender.avatar}" alt="${data.message.sender.username}" />`
        : `<img src="./images/nophoto.png" alt="${data.message.sender.username}" />`;

      // message attachments
      let attachments = '<div class="attachments">';

      if (data.message.attachment && data.message.attachment.length > 0) {
        data.message.attachment.forEach((attachment) => {
          attachments += `<img src="./uploads/attachments/${attachment}" /> `;
        });
      }

      attachments += '</div>';

      let messageHTML;

      // do not show avatar for loggedin user
      if (data.message.sender.id == loggedinUserId) {
        messageHTML = `<div class="message-row ${messageClass}"><div class="message-content">
              <div class="message-text">${data.message.message}</div>
              ${attachments}
              <div class="message-time">${moment(
                data.message.date_time
              ).fromNow()}</div>
            </div></div>`;
      } else {
        messageHTML = `<div class="message-row ${messageClass}"><div class="message-content">
              ${senderAvatar}
              <div class="message-text">${data.message.message}</div>
              ${attachments}
              <div class="message-time">${moment(
                data.message.date_time
              ).fromNow()}</div>
            </div></div>`;
      }

      // append the inoming message to message area as last item
      document
        .querySelector('#chat-message-list > .message-row:first-child')
        .insertAdjacentHTML('beforeBegin', messageHTML);
    }
  });

  // get messages of a conversation
  async function getMessages(conversation_id, current_conversation_name) {
    // messages failure toast
    const messagesFailureToast = Toastify({
      text: 'Error loading messages!',
      duration: 1000,
    });

    let response = await fetch(`/inbox/messages/${conversation_id}`);
    const result = await response.json();

    if (!result.errors && result.data) {
      form.style.visibility = 'visible';

      const { data, user, conversation_id } = result;

      participant = data.participant;
      current_conversation_id = conversation_id;

      if (data.messages) {
        let allMessages = '';

        if (data.messages.length > 0) {
          data.messages.forEach((message) => {
            let senderAvatar = message.sender.avatar
              ? `./uploads/avatars/${message.sender.avatar}`
              : './images/nophoto.png';
            const messageClass =
              message.sender.id === loggedinUserId
                ? 'you-message'
                : 'other-message';
            const showAvatar =
              message.sender.id === loggedinUserId
                ? ''
                : `<img src="${senderAvatar}" alt="${message.sender.username}" />`;

            // message attachments
            let attachments = '<div class="attachments">';

            if (message.attachment && message.attachment.length > 0) {
              message.attachment.forEach((attachment) => {
                attachments += `<img src="./uploads/attachments/${attachment}" /> `;
              });
            }

            attachments += '</div>';

            // final message html
            let messageHTML = `<div class="message-row ${messageClass}"><div class="message-content">
                      ${showAvatar}
                      <div class="message-text">${message.text}</div>
                      ${attachments}
                      <div class="message-time">${moment(
                        message.date_time
                      ).fromNow()}</div>
                    </div></div>`;

            allMessages += messageHTML;
            messageContainer.innerHTML = allMessages;
          });
        } else if (data.messages.length === 0) {
          messageContainer.innerHTML = '<div class="message-row"></div>';
        }

        chatTitleContainer.textContent = current_conversation_name;
      }
    } else {
      messagesFailureToast.showToast();
    }
  }

  // message sending
  // message sending
  form.onsubmit = async function (event) {
    event.preventDefault();

    const sendMessageFailureToast = Toastify({
      text: 'Error sending message',
      duration: 1000,
    });

    // Create form data and explicitly add the file input's files
    const formData = new FormData(form);

    // Double-check that files are added to the FormData
    const attachmentFiles = document.getElementById('attachment').files;
    // Clear any existing attachments from the FormData and re-add them
    formData.delete('attachment');
    for (let i = 0; i < attachmentFiles.length; i++) {
      formData.append('attachment', attachmentFiles[i]);
    }

    formData.append('receiverId', participant.id);
    formData.append('receiverName', participant.username);
    formData.append('avatar', participant.avatar || '');
    formData.append('conversationId', current_conversation_id);

    // Debug: Log the FormData contents to ensure files are included
    console.log('Files being sent:', attachmentFiles.length);

    // send the request to server
    let response = await fetch('/inbox/message', {
      method: 'POST',
      body: formData,
    });

    // get response
    let result = await response.json();

    if (!result.errors) {
      form.reset(); // reset the form
    } else {
      console.error('Message sending error:', result.errors);
      sendMessageFailureToast.showToast();
    }
  };
</script>
